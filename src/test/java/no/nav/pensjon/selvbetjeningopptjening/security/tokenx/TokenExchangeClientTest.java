package no.nav.pensjon.selvbetjeningopptjening.security.tokenx;

import no.nav.pensjon.selvbetjeningopptjening.mock.WebClientTest;
import no.nav.pensjon.selvbetjeningopptjening.security.impersonal.Oauth2ConfigGetter;
import no.nav.pensjon.selvbetjeningopptjening.security.time.ExpirationChecker;
import no.nav.pensjon.selvbetjeningopptjening.usersession.token.TokenAccessParam;
import no.nav.pensjon.selvbetjeningopptjening.usersession.token.TokenData;
import okhttp3.mockwebserver.MockResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.springframework.http.HttpStatus;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.time.LocalDateTime;

import static java.lang.String.format;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@ExtendWith(SpringExtension.class)
class TokenExchangeClientTest extends WebClientTest {

    private static final String ACCESS_TOKEN = "access-token 1";
    private static final String JSON_WEB_KEY = jsonWebKey();
    private static final String AUDIENCE = "audience1";
    private static final String PID = "pid1";
    private static final TokenAccessParam TOKEN_ACCESS_PARAM = TokenAccessParam.tokenExchange("subject-token");
    private TokenExchangeClient exchanger;

    @Mock
    private Oauth2ConfigGetter oauth2ConfigGetter;
    @Mock
    private ExpirationChecker expirationChecker;

    @BeforeEach
    void initialize() {
        when(oauth2ConfigGetter.getTokenEndpoint()).thenReturn(baseUrl());
        exchanger = new TokenExchangeClient(oauth2ConfigGetter, expirationChecker, "client-id", JSON_WEB_KEY);
    }

    @Test
    void getTokenData_returns_tokenData() {
        prepare(tokenResponse());
        when(expirationChecker.time()).thenReturn(LocalDateTime.MIN);

        TokenData tokenData = exchanger.getTokenData(TOKEN_ACCESS_PARAM, AUDIENCE, PID);

        assertEquals(ACCESS_TOKEN, tokenData.getAccessToken());
    }

    @Test
    void getTokenData_caches_tokenData() {
        prepare(tokenResponse());
        when(expirationChecker.time()).thenReturn(LocalDateTime.MIN);

        TokenData tokenData = exchanger.getTokenData(TOKEN_ACCESS_PARAM, AUDIENCE, PID);
        // Next statement will fail if token not cached, since only one response is enqueued:
        TokenData cachedTokenData = exchanger.getTokenData(TOKEN_ACCESS_PARAM, AUDIENCE, PID);

        assertEquals(ACCESS_TOKEN, tokenData.getAccessToken());
        assertEquals(ACCESS_TOKEN, cachedTokenData.getAccessToken());
    }

    private static MockResponse tokenResponse() {
        // Based on actual response from TokenDings
        return jsonResponse(HttpStatus.OK)
                .setBody(format("""

                        {
                          "access_token": "%s",
                          "issued_token_type": "urn:ietf:params:oauth:token-type:access_token",
                          "token_type": "Bearer",
                          "expires_in": 299
                        }""", ACCESS_TOKEN));
    }

    private static String jsonWebKey() {
        // Actual value of TOKEN_X_PRIVATE_JWK environment variable generated by NAIS in dev
        return """
                {
                  "use": "sig",
                  "kty": "RSA",
                  "kid": "8dc75fb0-3f4b-43dd-8bf4-800bbaa1bc77",
                  "n": "pZ4xvPGFOWAqAWFhIQBA9VJkVn7slVw7L7e2BYIGvE6xDrJJAVrCGlJ98h16S2lVC88_2gVNpAfxS2Vwq-WhXDQZqrbNUEYxvL61ZIK7jwbVMC_MOc3oa1I9jH3YVIHvDpnrT-5LSToIqLB62HW835xBKrlVlJtv6jI-BoP42j4kr4uKBz6zoRRsla8oQjxEMTpn_NW5Y5s-2222FPLE00DOBFIr4Wv4qJ0afVP9is-lcyBoXMrv7h7qJThQJjrke3VAXFBqC8IHqWSexqXNqN02nrcwDugnbYkQoPAct4FIRw6vDkod0BAutgFEJeDHVEnsFdxxLdrMNpWYLWUZvw",
                  "e": "AQAB",
                  "d": "gTe9PNsAA_UYsP0GaFYnWIDRUn8zHZHZh_CBLyj1EmUfVgUaWtkyCpGEPKxtJ3tmZJFuEzACFNIxnI7n6uZ-EE-CGyUHafNqiQYOxv4NUpmVKkSQxiT2iw2egggKCl1aZH0JENMuoFKMQPl4z3yFQb5LRgdWU103Y3WR2UmMltGWPcqyLBdpwrqRsqWtQK6WmuMwDWkypdw1QhdSXoUqQUR1el3QfILGgl6lkkb_bLByzhi6UVThJhN0RDGTj1PJa1yuB7z8iD3W57GgbILTHtWVnBRrQmFdpbkmZf_FIlXAFCEN1qmlI9TCksrNJab_cPf3RpS6vB4X_0pjVjpoyQ",
                  "p": "y04aAPnFUq209vIGKboZ6FWGeV1z4K0WQh23aQFZOEextPWmZUROausfCefaBGj4YJUSp9YzLIfk2tVRSegb2HIwFfTIqRMumSzGe8V4Lp_pojJWXWNXAonR1jL5bA_u6B7s_v8q8e02FJ3vPSOYCC7gwsSnT_q7ABcWywA0u-M",
                  "q": "0ItwUu7Q60QWPJBDS_OH0fXbre9YeVZ-mnNxKIZG9klPB8KzOzg9_GtYGvueBZcODui4UryeFtLe9sG6KCrjrjuTVLpLI1vNzBdz4seljM2FKwbwuXu0ymVJSzSsPfGmODHwUsNuJ-DmYD-BUX023OANkLhEcrom2dvsytICyXU",
                  "dp": "sY3gQAHjRzXV2eW9ZCvX_ITVEKGBVjNUQSHa0KYQ2YojtTrku4RQSChXzzrhuQBEC3Wl-ValErsML-IlQDqqNvpi7In_xUmvZK8qGWZ4c5_NV45GxwC_OMRMspmKI8o2iBqaOIl5ZBgbJx5XljnDyUHHodJFnSAIuSdxDJF9fKk",
                  "dq": "KyfP1Lmq7iSm3V2VL5Bz2NUh4rqW-nUVueyNzC8NXEYLXrXB1U1sNmIYV20eZFXACQHLswNpS5vTnAi29zz45MNbV7s9dVG4IrXvu0xJS_vzxNWo1xlsbj3Ljw6VXjQ1i4d6DgZ3MzVtNxmtLynUQpzy8bHQKFWxWIAUXlxbS0k",
                  "qi": "kb186zLvq52ruiCSARaC_PtqwbyHMB0WFyMr54M86EkixgKsrhruqVv4UJrI0WjvPXK1-7oB1fJbfAPCd5W54oix32alc62T4Vy0WPjjr8b4htE7qmZxJe_2gFYOrlqI5wufsskXyIpBIxlhVDa0uigmr_hgHLbw1cKzWV7Kv_c"
                }""";
    }
}
